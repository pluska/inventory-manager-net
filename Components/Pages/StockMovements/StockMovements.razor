@page "/stock-movements"
@using InventoryManager.Data
@using InventoryManager.Data.Entities
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@inject IDbContextFactory<ApplicationDbContext> ContextFactory
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>Stock Movements - Inventory Manager</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12 d-flex justify-content-between align-items-center">
            <div>
                <h1 class="display-5 text-primary">Stock Movements</h1>
                <p class="lead">Track inventory changes and movements</p>
            </div>
            <button class="btn btn-primary rounded-2xl" @onclick="OpenAddModal">
                Record Movement
            </button>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card rounded-2xl shadow-lg">
                <div class="card-header bg-light">
                    <div class="row align-items-center">
                        <div class="col">
                            <h5 class="mb-0">Movement History</h5>
                        </div>
                        <div class="col-auto">
                            <div class="input-group">
                                <input type="text" class="form-control rounded-2xl" placeholder="Search movements..." @bind="SearchTerm" @bind:event="oninput" />
                                <button class="btn btn-outline-secondary rounded-2xl" type="button">
                                    Search
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    @if (MovementList?.Any() == true)
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Date</th>
                                        <th>Product</th>
                                        <th>Type</th>
                                        <th>Quantity</th>
                                        <th>Previous Stock</th>
                                        <th>New Stock</th>
                                        <th>Performed By</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var movement in FilteredMovements)
                                    {
                                        <tr>
                                            <td>@movement.Timestamp.ToString("MM/dd/yyyy HH:mm")</td>
                                            <td><strong>@movement.Product?.Name</strong></td>
                                            <td>
                                                <span class="badge @(movement.MovementType == MovementType.IN ? "bg-success" : "bg-danger")">
                                                    @movement.MovementType
                                                </span>
                                            </td>
                                            <td>@movement.Quantity</td>
                                            <td>@(movement.MovementType == MovementType.IN 
                                                ? movement.Product?.Stock - movement.Quantity 
                                                : movement.Product?.Stock + movement.Quantity)</td>
                                            <td>@movement.Product?.Stock</td>
                                            <td>@movement.UserId</td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                                                    <button class="btn btn-sm btn-outline-info rounded-2xl" @onclick="() => ViewDetails(movement)">
                                    View Details
                                </button>
                                <button class="btn btn-sm btn-outline-danger rounded-2xl" @onclick="() => DeleteMovement(movement)">
                                    Delete
                                </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="bi bi-arrow-left-right fs-1 text-muted"></i>
                            <h4 class="text-muted mt-3">No stock movements found</h4>
                            <p class="text-muted">Start by recording your first stock movement.</p>
                            <button class="btn btn-primary rounded-2xl" @onclick="OpenAddModal">
                                Record First Movement
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@if (ShowAddModal)
{
    <StockMovementModal 
        IsVisible="ShowAddModal"
        Movement="CurrentMovement"
        Products="ProductList"
        IsEditing="IsEditing"
        OnSave="HandleSaveMovement"
        OnClose="CloseModal" />
}

@code {
    private List<StockMovement> MovementList { get; set; } = new();
    private List<Product> ProductList { get; set; } = new();
    private string SearchTerm { get; set; } = "";
    private bool ShowAddModal { get; set; } = false;
    private StockMovement CurrentMovement { get; set; } = new StockMovement
    {
        ProductId = 0,
        MovementType = MovementType.IN,
        Quantity = 0,
        UserId = "warehouse-staff",
        Timestamp = DateTime.Now
    };
    private bool IsEditing { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        using var context = await ContextFactory.CreateDbContextAsync();
        MovementList = await context.StockMovements
            .Include(sm => sm.Product)
            .OrderByDescending(sm => sm.Timestamp)
            .ToListAsync();
        ProductList = await context.Products.ToListAsync();
    }

    private IEnumerable<StockMovement> FilteredMovements => 
        MovementList.Where(m => string.IsNullOrEmpty(SearchTerm) || 
                                 m.Product?.Name.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) == true);

    private void ViewDetails(StockMovement movement)
    {
        // TODO: Show movement details modal
    }

    private async Task DeleteMovement(StockMovement movement)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this stock movement? This action cannot be undone."))
        {
            using var context = await ContextFactory.CreateDbContextAsync();
            var existingMovement = await context.StockMovements.FindAsync(movement.MovementId);
            if (existingMovement != null)
            {
                context.StockMovements.Remove(existingMovement);
                await context.SaveChangesAsync();
            }
            await LoadData();
        }
    }

    private void OpenAddModal()
    {
        ShowAddModal = true;
        IsEditing = false;
        CurrentMovement = new StockMovement
        {
            ProductId = 0,
            MovementType = MovementType.IN,
            Quantity = 0,
            UserId = "warehouse-staff",
            Timestamp = DateTime.Now
        };
        StateHasChanged();
    }

    private async Task HandleSaveMovement(StockMovement movement)
    {
        using var context = await ContextFactory.CreateDbContextAsync();
        // Set timestamp if not editing
        if (!IsEditing)
        {
            movement.Timestamp = DateTime.Now;
        }

        if (IsEditing)
        {
            var existingMovement = await context.StockMovements.FindAsync(movement.MovementId);
            if (existingMovement != null)
            {
                // TODO: Handle stock reversal and update
                existingMovement.ProductId = movement.ProductId;
                existingMovement.MovementType = movement.MovementType;
                existingMovement.Quantity = movement.Quantity;
                existingMovement.UserId = movement.UserId;
            }
        }
        else
        {
            context.StockMovements.Add(movement);
            
            // Update product stock
            var product = await context.Products.FindAsync(movement.ProductId);
            if (product != null)
            {
                if (movement.MovementType == MovementType.IN)
                {
                    product.Stock += movement.Quantity;
                }
                else
                {
                    product.Stock -= movement.Quantity;
                }
            }
        }
        
        await context.SaveChangesAsync();
        await LoadData();
        CloseModal();
    }

    private void CloseModal()
    {
        ShowAddModal = false;
        IsEditing = false;
        CurrentMovement = new StockMovement
        {
            ProductId = 0,
            MovementType = MovementType.IN,
            Quantity = 0,
            UserId = "warehouse-staff",
            Timestamp = DateTime.Now
        };
    }
} 