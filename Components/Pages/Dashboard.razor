@page "/dashboard"
@namespace InventoryManager.Components.Pages
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components
@using Microsoft.EntityFrameworkCore
@using InventoryManager.Data
@using InventoryManager.Data.Entities
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory

<PageTitle>Dashboard - Inventory Manager</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <h1 class="display-4 text-primary">Inventory Dashboard</h1>
            <p class="lead">Welcome to your inventory management system</p>
        </div>
    </div>

    <!-- Statistics Cards -->
    <div class="row mb-4">
        <div class="col-md-3 mb-3">
            <div class="card bg-primary text-white rounded-2xl shadow-lg">
                <div class="card-body text-center">
                    <i class="bi bi-box-seam fs-1 mb-2"></i>
                    <h5 class="card-title">Total Products</h5>
                    <h2 class="display-6">@totalProducts</h2>
                </div>
            </div>
        </div>
        
        <div class="col-md-3 mb-3">
            <div class="card bg-success text-white rounded-2xl shadow-lg">
                <div class="card-body text-center">
                    <i class="bi bi-truck fs-1 mb-2"></i>
                    <h5 class="card-title">Suppliers</h5>
                    <h2 class="display-6">@totalSuppliers</h2>
                </div>
            </div>
        </div>
        
        <div class="col-md-3 mb-3">
            <div class="card bg-info text-white rounded-2xl shadow-lg">
                <div class="card-body text-center">
                    <i class="bi bi-arrow-left-right fs-1 mb-2"></i>
                    <h5 class="card-title">Stock Movements</h5>
                    <h2 class="display-6">@totalMovements</h2>
                </div>
            </div>
        </div>
        
        <div class="col-md-3 mb-3">
            <div class="card bg-warning text-white rounded-2xl shadow-lg">
                <div class="card-body text-center">
                    <i class="bi bi-exclamation-triangle fs-1 mb-2"></i>
                    <h5 class="card-title">Low Stock Items</h5>
                    <h2 class="display-6">@lowStockItems</h2>
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Activity -->
    <div class="row">
        <div class="col-md-6 mb-4">
            <div class="card rounded-2xl shadow-lg">
                <div class="card-header bg-light">
                    <h5 class="mb-0"><i class="bi bi-clock-history me-2"></i>Recent Stock Movements</h5>
                </div>
                <div class="card-body">
                    @if (recentMovements?.Any() == true)
                    {
                        <div class="list-group list-group-flush">
                            @foreach (var movement in recentMovements.Take(5))
                            {
                                <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                                    <div>
                                        <strong>@movement.Product?.Name</strong>
                                        <br>
                                        <small class="text-muted">@movement.MovementType - @movement.Quantity units</small>
                                    </div>
                                    <small class="text-muted">@movement.Timestamp.ToString("MMM dd")</small>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-muted text-center">No recent stock movements</p>
                    }
                </div>
            </div>
        </div>
        
        <div class="col-md-6 mb-4">
            <div class="card rounded-2xl shadow-lg">
                <div class="card-header bg-light">
                    <h5 class="mb-0"><i class="bi bi-box-seam me-2"></i>Low Stock Alerts</h5>
                </div>
                <div class="card-body">
                    @if (lowStockProducts?.Any() == true)
                    {
                        <div class="list-group list-group-flush">
                            @foreach (var product in lowStockProducts.Take(5))
                            {
                                <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                                    <div>
                                        <strong>@product.Name</strong>
                                        <br>
                                        <small class="text-muted">Current stock: @product.Stock</small>
                                    </div>
                                    <span class="badge bg-danger">Low Stock</span>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-muted text-center">All products have sufficient stock</p>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Actions -->
    <div class="row">
        <div class="col-12">
            <div class="card rounded-2xl shadow-lg">
                <div class="card-header bg-light">
                    <h5 class="mb-0"><i class="bi bi-lightning me-2"></i>Quick Actions</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3 mb-2">
                            <a href="/products" class="btn btn-outline-primary rounded-2xl w-100">
                                <i class="bi bi-box-seam me-2"></i>Manage Products
                            </a>
                        </div>
                        <div class="col-md-3 mb-2">
                            <a href="/suppliers" class="btn btn-outline-success rounded-2xl w-100">
                                <i class="bi bi-truck me-2"></i>Manage Suppliers
                            </a>
                        </div>
                        <div class="col-md-3 mb-2">
                            <a href="/stock-movements" class="btn btn-outline-info rounded-2xl w-100">
                                <i class="bi bi-arrow-left-right me-2"></i>Stock Movements
                            </a>
                        </div>
                        <div class="col-md-3 mb-2">
                            <a href="/reports" class="btn btn-outline-warning rounded-2xl w-100">
                                <i class="bi bi-graph-up me-2"></i>View Reports
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private int totalProducts = 0;
    private int totalSuppliers = 0;
    private int totalMovements = 0;
    private int lowStockItems = 0;
    private List<StockMovement>? recentMovements;
    private List<Product>? lowStockProducts;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync();
            
            // Load statistics
            totalProducts = await context.Products.CountAsync();
            totalSuppliers = await context.Suppliers.CountAsync();
            totalMovements = await context.StockMovements.CountAsync();
            lowStockItems = await context.Products.CountAsync(p => p.Stock <= p.MinimumStock);
            
            // Load recent data
            recentMovements = await context.StockMovements
                .Include(sm => sm.Product)
                .OrderByDescending(sm => sm.Timestamp)
                .Take(5)
                .ToListAsync();
                
            lowStockProducts = await context.Products
                .Where(p => p.Stock <= p.MinimumStock)
                .OrderBy(p => p.Stock)
                .Take(5)
                .ToListAsync();
        }
        catch
        {
            // Handle errors gracefully - could log to proper logging service in production
        }
    }
}
