@page "/products"
@using InventoryManager.Data
@using InventoryManager.Data.Entities
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@inject ApplicationDbContext Context
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>Products - Inventory Manager</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12 d-flex justify-content-between align-items-center">
            <div>
                <h1 class="display-5 text-primary">Products</h1>
                <p class="lead">Manage your inventory products</p>
            </div>
            <button class="btn btn-primary rounded-2xl" @onclick="OpenAddModal">
                Add Product
            </button>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card rounded-2xl shadow-lg">
                <div class="card-header bg-light">
                    <div class="row align-items-center">
                        <div class="col">
                            <h5 class="mb-0">Product List</h5>
                        </div>
                        <div class="col-auto">
                            <div class="input-group">
                                <input type="text" class="form-control rounded-2xl" placeholder="Search products..." @bind="SearchTerm" @bind:event="oninput" />
                                <button class="btn btn-outline-secondary rounded-2xl" type="button">
                                    Search
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    @if (ProductList?.Any() == true)
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>SKU</th>
                                        <th>Name</th>
                                        <th>Price</th>
                                        <th>Stock</th>
                                        <th>Min Stock</th>
                                        <th>Supplier</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var product in FilteredProducts)
                                    {
                                        <tr>
                                            <td><strong>@product.SKU</strong></td>
                                            <td>@product.Name</td>
                                            <td>$@product.Price.ToString("F2")</td>
                                            <td>
                                                <span class="badge @(product.Stock <= product.MinimumStock ? "bg-danger" : "bg-success")">
                                                    @product.Stock
                                                </span>
                                            </td>
                                            <td>@product.MinimumStock</td>
                                            <td>@product.Supplier?.Name</td>
                                            <td>
                                                @if (product.Stock <= product.MinimumStock)
                                                {
                                                    <span class="badge bg-warning">Low Stock</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-success">In Stock</span>
                                                }
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-sm btn-outline-primary rounded-2xl" @onclick="() => EditProduct(product)">
                                                        Edit
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-success rounded-2xl" @onclick="() => RecordMovement(product)">
                                                        Move
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger rounded-2xl" @onclick="() => DeleteProduct(product)">
                                                        Delete
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="bi bi-box-seam fs-1 text-muted"></i>
                            <h4 class="text-muted mt-3">No products found</h4>
                            <p class="text-muted">Start by adding your first product to the inventory.</p>
                            <button class="btn btn-primary rounded-2xl" @onclick="OpenAddModal">
                                Add First Product
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@if (ShowAddModal)
{
    <ProductModal 
        IsVisible="ShowAddModal"
        Product="CurrentProduct"
        Suppliers="SupplierList"
        IsEditing="IsEditing"
        OnSave="HandleSaveProduct"
        OnClose="CloseModal" />
}

@code {
    private List<Product> ProductList { get; set; } = new();
    private List<Supplier> SupplierList { get; set; } = new();
    private string SearchTerm { get; set; } = "";
    private bool ShowAddModal { get; set; } = false;
    private Product CurrentProduct { get; set; } = new();
    private bool IsEditing { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Products component initialized");
        await LoadData();
    }



    private async Task LoadData()
    {
        ProductList = await Context.Products.Include(p => p.Supplier).ToListAsync();
        SupplierList = await Context.Suppliers.ToListAsync();
    }

    private IEnumerable<Product> FilteredProducts => 
        ProductList.Where(p => string.IsNullOrEmpty(SearchTerm) || 
                           p.Name.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ||
                           p.SKU.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase));

    private void EditProduct(Product product)
    {
        CurrentProduct = new Product
        {
            ProductId = product.ProductId,
            Name = product.Name,
            SKU = product.SKU,
            Price = product.Price,
            Stock = product.Stock,
            MinimumStock = product.MinimumStock,
            SupplierId = product.SupplierId
        };
        IsEditing = true;
        ShowAddModal = true;
    }

    private async Task DeleteProduct(Product product)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{product.Name}'? This action cannot be undone."))
        {
            Context.Products.Remove(product);
            await Context.SaveChangesAsync();
            await LoadData();
        }
    }

    private void RecordMovement(Product product)
    {
        // TODO: Navigate to stock movement page
        Navigation.NavigateTo($"/stock-movements?productId={product.ProductId}");
    }

    private async Task HandleSaveProduct(Product product)
    {
        if (IsEditing)
        {
            var existingProduct = await Context.Products.FindAsync(product.ProductId);
            if (existingProduct != null)
            {
                existingProduct.Name = product.Name;
                existingProduct.SKU = product.SKU;
                existingProduct.Price = product.Price;
                existingProduct.Stock = product.Stock;
                existingProduct.MinimumStock = product.MinimumStock;
                existingProduct.SupplierId = product.SupplierId;
            }
        }
        else
        {
            Context.Products.Add(product);
        }
        
        await Context.SaveChangesAsync();
        await LoadData();
        CloseModal();
    }

    private void OpenAddModal()
    {
        ShowAddModal = true;
        IsEditing = false;
        CurrentProduct = new Product();
        StateHasChanged();
    }



    private void CloseModal()
    {
        ShowAddModal = false;
        IsEditing = false;
        CurrentProduct = new Product();
        StateHasChanged();
    }
} 