@page "/reset-password"
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@attribute [AllowAnonymous]
@inject UserManager<IdentityUser> UserManager
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Reset Password - Inventory Manager</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-4">
            <div class="card rounded-2xl shadow-lg mt-5">
                <div class="card-header bg-primary text-white text-center py-4">
                    <h3 class="mb-0">Reset Password</h3>
                    <p class="mb-0 text-white-50">Set your new password</p>
                </div>
                
                <div class="card-body p-4">
                    @if (!string.IsNullOrEmpty(SuccessMessage))
                    {
                        <div class="alert alert-success rounded-2xl" role="alert">
                            @SuccessMessage
                        </div>
                        
                        <div class="text-center">
                            <a href="login" class="btn btn-primary rounded-2xl">
                                Go to Login
                            </a>
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger rounded-2xl" role="alert">
                            @ErrorMessage
                        </div>
                        
                        <div class="text-center">
                            <a href="forgot-password" class="btn btn-outline-primary rounded-2xl">
                                Request New Reset Link
                            </a>
                        </div>
                    }
                    else if (IsValidToken)
                    {
                        <form @onsubmit="HandleResetPassword">
                            <div class="mb-3">
                                <label for="newPassword" class="form-label">New Password</label>
                                <input type="password" id="newPassword" class="form-control rounded-2xl" 
                                       @bind="NewPassword" 
                                       placeholder="Enter your new password" 
                                       required />
                                <div class="form-text">
                                    Password must be at least 6 characters long and contain uppercase, lowercase, and numeric characters.
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <label for="confirmPassword" class="form-label">Confirm New Password</label>
                                <input type="password" id="confirmPassword" class="form-control rounded-2xl" 
                                       @bind="ConfirmPassword" 
                                       placeholder="Confirm your new password" 
                                       required />
                            </div>
                            
                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-primary rounded-2xl py-2" 
                                        disabled="@IsLoading">
                                    @if (IsLoading)
                                    {
                                        <span>Resetting Password...</span>
                                    }
                                    else
                                    {
                                        <span>Reset Password</span>
                                    }
                                </button>
                            </div>
                        </form>
                    }
                    else
                    {
                        <div class="text-center">
                            <p class="text-muted">Invalid or expired reset link.</p>
                            <a href="forgot-password" class="btn btn-primary rounded-2xl">
                                Request New Reset Link
                            </a>
                        </div>
                    }
                    
                    <hr class="my-4">
                    
                    <div class="text-center">
                        <a href="login" class="btn btn-outline-secondary rounded-2xl">
                            Back to Login
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    private string? Email { get; set; }
    
    [SupplyParameterFromQuery]
    private string? Token { get; set; }
    
    private string NewPassword { get; set; } = string.Empty;
    private string ConfirmPassword { get; set; } = string.Empty;
    private bool IsLoading { get; set; } = false;
    private string ErrorMessage { get; set; } = string.Empty;
    private string SuccessMessage { get; set; } = string.Empty;
    private bool IsValidToken { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Email) || string.IsNullOrEmpty(Token))
        {
            ErrorMessage = "Invalid reset link. Please request a new password reset.";
            return;
        }

        try
        {
            var user = await UserManager.FindByEmailAsync(Email);
            if (user == null)
            {
                ErrorMessage = "Invalid reset link. Please request a new password reset.";
                return;
            }

            // Verify the token is valid
            var isValid = await UserManager.VerifyUserTokenAsync(user, UserManager.Options.Tokens.PasswordResetTokenProvider, "ResetPassword", Token);
            if (!isValid)
            {
                ErrorMessage = "This reset link has expired or is invalid. Please request a new password reset.";
                return;
            }

            IsValidToken = true;
        }
        catch
        {
            ErrorMessage = "An error occurred while validating the reset link. Please try again.";
        }
    }

    private async Task HandleResetPassword()
    {
        if (string.IsNullOrWhiteSpace(NewPassword) || string.IsNullOrWhiteSpace(ConfirmPassword))
        {
            ErrorMessage = "Please enter both passwords.";
            return;
        }

        if (NewPassword != ConfirmPassword)
        {
            ErrorMessage = "Passwords do not match.";
            return;
        }

        if (NewPassword.Length < 6)
        {
            ErrorMessage = "Password must be at least 6 characters long.";
            return;
        }

        IsLoading = true;
        ErrorMessage = string.Empty;

        try
        {
            if (string.IsNullOrEmpty(Email) || string.IsNullOrEmpty(Token))
            {
                ErrorMessage = "Invalid reset parameters.";
                return;
            }

            var user = await UserManager.FindByEmailAsync(Email);
            if (user == null)
            {
                ErrorMessage = "User not found.";
                return;
            }

            var result = await UserManager.ResetPasswordAsync(user, Token, NewPassword);
            
            if (result.Succeeded)
            {
                SuccessMessage = "Your password has been successfully reset. You can now log in with your new password.";
            }
            else
            {
                var errors = string.Join(", ", result.Errors.Select(e => e.Description));
                ErrorMessage = $"Password reset failed: {errors}";
            }
        }
        catch
        {
            ErrorMessage = "An error occurred while resetting your password. Please try again.";
        }
        finally
        {
            IsLoading = false;
        }
    }
}
