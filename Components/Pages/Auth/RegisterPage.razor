@page "/register"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveServer
@attribute [AllowAnonymous]
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<IdentityUser> UserManager
@inject SignInManager<IdentityUser> SignInManager

<PageTitle>Register - Inventory Manager</PageTitle>

@if (isAuthenticated)
{
    <div class="text-center py-5">
        <div class="alert alert-info border-info rounded-2xl shadow-lg mx-auto" style="max-width: 500px;">
            <h4 class="mb-3">üîê Already Logged In</h4>
            <p class="mb-4">You are already authenticated. Redirecting to dashboard...</p>
            <div class="spinner-border text-info" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    </div>
}
else
{
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-6 col-lg-4">
                <div class="card rounded-2xl shadow-lg mt-5">
                    <div class="card-header bg-success text-white text-center py-4">
                        <h3 class="mb-0">Create Account</h3>
                        <p class="mb-0 text-white-50">Join our inventory management system</p>
                    </div>
                    
                    <div class="card-body p-4">
                        <EditForm Model="@registerModel" OnValidSubmit="HandleRegistration">
                            <DataAnnotationsValidator />
                            
                            @if (showSuccess)
                            {
                                <div class="alert alert-success rounded-2xl mb-3">
                                    <i class="bi bi-check-circle me-2"></i>
                                    Account created successfully! Redirecting to login...
                                </div>
                            }
                            
                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="alert alert-danger rounded-2xl mb-3">
                                    @errorMessage
                                </div>
                            }
                            
                            <div class="mb-3">
                                <label for="email" class="form-label">Email Address</label>
                                <InputText id="email" @bind-Value="registerModel.Email" class="form-control rounded-2xl" 
                                         placeholder="Enter your email" />
                                <ValidationMessage For="@(() => registerModel.Email)" />
                            </div>
                            
                            <div class="mb-3">
                                <label for="password" class="form-label">Password</label>
                                <InputText type="password" id="password" @bind-Value="registerModel.Password" class="form-control rounded-2xl" 
                                         placeholder="Create a password" />
                                <ValidationMessage For="@(() => registerModel.Password)" />
                            </div>
                            
                            <div class="mb-3">
                                <label for="confirmPassword" class="form-label">Confirm Password</label>
                                <InputText type="password" id="confirmPassword" @bind-Value="registerModel.ConfirmPassword" class="form-control rounded-2xl" 
                                         placeholder="Confirm your password" />
                                <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
                            </div>
                            
                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-success rounded-2xl py-2" disabled="@isProcessing">
                                    @if (isProcessing)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                        <span>Creating Account...</span>
                                    }
                                    else
                                    {
                                        <span>Create Account</span>
                                    }
                                </button>
                            </div>
                        </EditForm>
                        
                        <hr class="my-4">
                        
                        <div class="text-center">
                            <p class="text-muted mb-2">Already have an account?</p>
                            <a href="/login" class="btn btn-outline-success rounded-2xl">
                                Sign In
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool isAuthenticated = false;
    private bool isProcessing = false;
    private string errorMessage = string.Empty;
    private RegisterModel registerModel = new();
    private bool showSuccess = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated == true;
        
        if (isAuthenticated)
        {
            // Redirect to dashboard after a short delay
            await Task.Delay(2000);
            Navigation.NavigateTo("/dashboard", forceLoad: false);
        }
    }

    private async Task HandleRegistration()
    {
        try
        {
            isProcessing = true;
            errorMessage = string.Empty;

            // Validate passwords match
            if (registerModel.Password != registerModel.ConfirmPassword)
            {
                errorMessage = "Password and confirmation password do not match.";
                return;
            }

            // Create user
            var user = new IdentityUser { UserName = registerModel.Email, Email = registerModel.Email };
            var result = await UserManager.CreateAsync(user, registerModel.Password);

            if (result.Succeeded)
            {
                // Show success message briefly
                showSuccess = true;
                await Task.Delay(1500); // Show success for 1.5 seconds
                
                // Redirect to login page
                Navigation.NavigateTo("/login", forceLoad: false);
            }
            else
            {
                errorMessage = string.Join(" ", result.Errors.Select(e => e.Description));
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during registration. Please try again.";
            Console.WriteLine($"Registration error: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be at least 6 characters long")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password confirmation is required")]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}
